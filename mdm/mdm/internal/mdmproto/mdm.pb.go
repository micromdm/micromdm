// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mdm.proto

/*
	Package mdmproto is a generated protocol buffer package.

	It is generated from these files:
		mdm.proto

	It has these top-level messages:
		CommandPayload
		Command
		InstallProfile
		RemoveProfile
		InstallProvisioningProfile
		RemoveProvisioningProfile
		InstalledApplicationList
		DeviceInformation
		ClearPasscode
		DeviceLock
		EraseDevice
		RequestMirroring
		Restrictions
		UnlockUserAccount
		DeleteUser
		EnableLostMode
		InstallApplication
		InstallApplicationOptions
		InstallApplicationConfiguration
		InstallApplicationAttributes
		AccountConfiguration
		AutoSetupAdminAccounts
		ResultPayload
		ErrorChain
*/
package mdmproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ResultPayload_Status int32

const (
	ResultPayload_Acknowledged       ResultPayload_Status = 0
	ResultPayload_Error              ResultPayload_Status = 1
	ResultPayload_CommandFormatError ResultPayload_Status = 2
	ResultPayload_Idle               ResultPayload_Status = 3
	ResultPayload_NotNow             ResultPayload_Status = 4
)

var ResultPayload_Status_name = map[int32]string{
	0: "Acknowledged",
	1: "Error",
	2: "CommandFormatError",
	3: "Idle",
	4: "NotNow",
}
var ResultPayload_Status_value = map[string]int32{
	"Acknowledged":       0,
	"Error":              1,
	"CommandFormatError": 2,
	"Idle":               3,
	"NotNow":             4,
}

func (x ResultPayload_Status) String() string {
	return proto.EnumName(ResultPayload_Status_name, int32(x))
}
func (ResultPayload_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorMdm, []int{22, 0} }

type CommandPayload struct {
	CommandUuid string   `protobuf:"bytes,1,opt,name=command_uuid,json=commandUuid,proto3" json:"command_uuid,omitempty"`
	Command     *Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
}

func (m *CommandPayload) Reset()                    { *m = CommandPayload{} }
func (m *CommandPayload) String() string            { return proto.CompactTextString(m) }
func (*CommandPayload) ProtoMessage()               {}
func (*CommandPayload) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{0} }

func (m *CommandPayload) GetCommandUuid() string {
	if m != nil {
		return m.CommandUuid
	}
	return ""
}

func (m *CommandPayload) GetCommand() *Command {
	if m != nil {
		return m.Command
	}
	return nil
}

type Command struct {
	RequestType string `protobuf:"bytes,1,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	//
	// Request Types that do not have additional fields:
	// - ProfileList
	// - ProvisioningProfileList
	// - CertificateList",
	// - SecurityInfo
	// - RestartDevice
	// - ShutDownDevice
	// - StopMirroring
	// - ClearRestrictionsPassword
	// - UserList
	// - LogOutUser
	// - PlayLostModeSound
	// - DisableLostMode
	// - DeviceLocation
	//
	// Types that are valid to be assigned to Request:
	//	*Command_InstallProfile
	//	*Command_RemoveProfile
	//	*Command_InstallProvisioningProfile
	//	*Command_RemoveProfisioningProfile
	//	*Command_InstalledApplicationList
	//	*Command_DeviceInformation
	//	*Command_DeviceLock
	//	*Command_ClearPasscode
	//	*Command_EraseDevice
	//	*Command_RequestMirroring
	//	*Command_Restrictions
	//	*Command_UnlockUserAccount
	//	*Command_DeleteUser
	//	*Command_EnableLostMode
	//	*Command_InstallApplication
	//	*Command_AccountConfiguration
	Request isCommand_Request `protobuf_oneof:"request"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{1} }

type isCommand_Request interface {
	isCommand_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Command_InstallProfile struct {
	InstallProfile *InstallProfile `protobuf:"bytes,2,opt,name=install_profile,json=installProfile,oneof"`
}
type Command_RemoveProfile struct {
	RemoveProfile *RemoveProfile `protobuf:"bytes,3,opt,name=remove_profile,json=removeProfile,oneof"`
}
type Command_InstallProvisioningProfile struct {
	InstallProvisioningProfile *InstallProvisioningProfile `protobuf:"bytes,4,opt,name=install_provisioning_profile,json=installProvisioningProfile,oneof"`
}
type Command_RemoveProfisioningProfile struct {
	RemoveProfisioningProfile *RemoveProvisioningProfile `protobuf:"bytes,5,opt,name=remove_profisioning_profile,json=removeProfisioningProfile,oneof"`
}
type Command_InstalledApplicationList struct {
	InstalledApplicationList *InstalledApplicationList `protobuf:"bytes,6,opt,name=installed_application_list,json=installedApplicationList,oneof"`
}
type Command_DeviceInformation struct {
	DeviceInformation *DeviceInformation `protobuf:"bytes,7,opt,name=device_information,json=deviceInformation,oneof"`
}
type Command_DeviceLock struct {
	DeviceLock *DeviceLock `protobuf:"bytes,8,opt,name=device_lock,json=deviceLock,oneof"`
}
type Command_ClearPasscode struct {
	ClearPasscode *ClearPasscode `protobuf:"bytes,9,opt,name=clear_passcode,json=clearPasscode,oneof"`
}
type Command_EraseDevice struct {
	EraseDevice *EraseDevice `protobuf:"bytes,10,opt,name=erase_device,json=eraseDevice,oneof"`
}
type Command_RequestMirroring struct {
	RequestMirroring *RequestMirroring `protobuf:"bytes,11,opt,name=request_mirroring,json=requestMirroring,oneof"`
}
type Command_Restrictions struct {
	Restrictions *Restrictions `protobuf:"bytes,12,opt,name=restrictions,oneof"`
}
type Command_UnlockUserAccount struct {
	UnlockUserAccount *UnlockUserAccount `protobuf:"bytes,13,opt,name=unlock_user_account,json=unlockUserAccount,oneof"`
}
type Command_DeleteUser struct {
	DeleteUser *DeleteUser `protobuf:"bytes,14,opt,name=delete_user,json=deleteUser,oneof"`
}
type Command_EnableLostMode struct {
	EnableLostMode *EnableLostMode `protobuf:"bytes,15,opt,name=enable_lost_mode,json=enableLostMode,oneof"`
}
type Command_InstallApplication struct {
	InstallApplication *InstallApplication `protobuf:"bytes,16,opt,name=install_application,json=installApplication,oneof"`
}
type Command_AccountConfiguration struct {
	AccountConfiguration *AccountConfiguration `protobuf:"bytes,17,opt,name=account_configuration,json=accountConfiguration,oneof"`
}

func (*Command_InstallProfile) isCommand_Request()             {}
func (*Command_RemoveProfile) isCommand_Request()              {}
func (*Command_InstallProvisioningProfile) isCommand_Request() {}
func (*Command_RemoveProfisioningProfile) isCommand_Request()  {}
func (*Command_InstalledApplicationList) isCommand_Request()   {}
func (*Command_DeviceInformation) isCommand_Request()          {}
func (*Command_DeviceLock) isCommand_Request()                 {}
func (*Command_ClearPasscode) isCommand_Request()              {}
func (*Command_EraseDevice) isCommand_Request()                {}
func (*Command_RequestMirroring) isCommand_Request()           {}
func (*Command_Restrictions) isCommand_Request()               {}
func (*Command_UnlockUserAccount) isCommand_Request()          {}
func (*Command_DeleteUser) isCommand_Request()                 {}
func (*Command_EnableLostMode) isCommand_Request()             {}
func (*Command_InstallApplication) isCommand_Request()         {}
func (*Command_AccountConfiguration) isCommand_Request()       {}

func (m *Command) GetRequest() isCommand_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Command) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *Command) GetInstallProfile() *InstallProfile {
	if x, ok := m.GetRequest().(*Command_InstallProfile); ok {
		return x.InstallProfile
	}
	return nil
}

func (m *Command) GetRemoveProfile() *RemoveProfile {
	if x, ok := m.GetRequest().(*Command_RemoveProfile); ok {
		return x.RemoveProfile
	}
	return nil
}

func (m *Command) GetInstallProvisioningProfile() *InstallProvisioningProfile {
	if x, ok := m.GetRequest().(*Command_InstallProvisioningProfile); ok {
		return x.InstallProvisioningProfile
	}
	return nil
}

func (m *Command) GetRemoveProfisioningProfile() *RemoveProvisioningProfile {
	if x, ok := m.GetRequest().(*Command_RemoveProfisioningProfile); ok {
		return x.RemoveProfisioningProfile
	}
	return nil
}

func (m *Command) GetInstalledApplicationList() *InstalledApplicationList {
	if x, ok := m.GetRequest().(*Command_InstalledApplicationList); ok {
		return x.InstalledApplicationList
	}
	return nil
}

func (m *Command) GetDeviceInformation() *DeviceInformation {
	if x, ok := m.GetRequest().(*Command_DeviceInformation); ok {
		return x.DeviceInformation
	}
	return nil
}

func (m *Command) GetDeviceLock() *DeviceLock {
	if x, ok := m.GetRequest().(*Command_DeviceLock); ok {
		return x.DeviceLock
	}
	return nil
}

func (m *Command) GetClearPasscode() *ClearPasscode {
	if x, ok := m.GetRequest().(*Command_ClearPasscode); ok {
		return x.ClearPasscode
	}
	return nil
}

func (m *Command) GetEraseDevice() *EraseDevice {
	if x, ok := m.GetRequest().(*Command_EraseDevice); ok {
		return x.EraseDevice
	}
	return nil
}

func (m *Command) GetRequestMirroring() *RequestMirroring {
	if x, ok := m.GetRequest().(*Command_RequestMirroring); ok {
		return x.RequestMirroring
	}
	return nil
}

func (m *Command) GetRestrictions() *Restrictions {
	if x, ok := m.GetRequest().(*Command_Restrictions); ok {
		return x.Restrictions
	}
	return nil
}

func (m *Command) GetUnlockUserAccount() *UnlockUserAccount {
	if x, ok := m.GetRequest().(*Command_UnlockUserAccount); ok {
		return x.UnlockUserAccount
	}
	return nil
}

func (m *Command) GetDeleteUser() *DeleteUser {
	if x, ok := m.GetRequest().(*Command_DeleteUser); ok {
		return x.DeleteUser
	}
	return nil
}

func (m *Command) GetEnableLostMode() *EnableLostMode {
	if x, ok := m.GetRequest().(*Command_EnableLostMode); ok {
		return x.EnableLostMode
	}
	return nil
}

func (m *Command) GetInstallApplication() *InstallApplication {
	if x, ok := m.GetRequest().(*Command_InstallApplication); ok {
		return x.InstallApplication
	}
	return nil
}

func (m *Command) GetAccountConfiguration() *AccountConfiguration {
	if x, ok := m.GetRequest().(*Command_AccountConfiguration); ok {
		return x.AccountConfiguration
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Command) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Command_OneofMarshaler, _Command_OneofUnmarshaler, _Command_OneofSizer, []interface{}{
		(*Command_InstallProfile)(nil),
		(*Command_RemoveProfile)(nil),
		(*Command_InstallProvisioningProfile)(nil),
		(*Command_RemoveProfisioningProfile)(nil),
		(*Command_InstalledApplicationList)(nil),
		(*Command_DeviceInformation)(nil),
		(*Command_DeviceLock)(nil),
		(*Command_ClearPasscode)(nil),
		(*Command_EraseDevice)(nil),
		(*Command_RequestMirroring)(nil),
		(*Command_Restrictions)(nil),
		(*Command_UnlockUserAccount)(nil),
		(*Command_DeleteUser)(nil),
		(*Command_EnableLostMode)(nil),
		(*Command_InstallApplication)(nil),
		(*Command_AccountConfiguration)(nil),
	}
}

func _Command_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Command)
	// request
	switch x := m.Request.(type) {
	case *Command_InstallProfile:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InstallProfile); err != nil {
			return err
		}
	case *Command_RemoveProfile:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveProfile); err != nil {
			return err
		}
	case *Command_InstallProvisioningProfile:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InstallProvisioningProfile); err != nil {
			return err
		}
	case *Command_RemoveProfisioningProfile:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RemoveProfisioningProfile); err != nil {
			return err
		}
	case *Command_InstalledApplicationList:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InstalledApplicationList); err != nil {
			return err
		}
	case *Command_DeviceInformation:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceInformation); err != nil {
			return err
		}
	case *Command_DeviceLock:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceLock); err != nil {
			return err
		}
	case *Command_ClearPasscode:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClearPasscode); err != nil {
			return err
		}
	case *Command_EraseDevice:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EraseDevice); err != nil {
			return err
		}
	case *Command_RequestMirroring:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RequestMirroring); err != nil {
			return err
		}
	case *Command_Restrictions:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Restrictions); err != nil {
			return err
		}
	case *Command_UnlockUserAccount:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnlockUserAccount); err != nil {
			return err
		}
	case *Command_DeleteUser:
		_ = b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeleteUser); err != nil {
			return err
		}
	case *Command_EnableLostMode:
		_ = b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EnableLostMode); err != nil {
			return err
		}
	case *Command_InstallApplication:
		_ = b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InstallApplication); err != nil {
			return err
		}
	case *Command_AccountConfiguration:
		_ = b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AccountConfiguration); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Command.Request has unexpected type %T", x)
	}
	return nil
}

func _Command_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Command)
	switch tag {
	case 2: // request.install_profile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstallProfile)
		err := b.DecodeMessage(msg)
		m.Request = &Command_InstallProfile{msg}
		return true, err
	case 3: // request.remove_profile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoveProfile)
		err := b.DecodeMessage(msg)
		m.Request = &Command_RemoveProfile{msg}
		return true, err
	case 4: // request.install_provisioning_profile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstallProvisioningProfile)
		err := b.DecodeMessage(msg)
		m.Request = &Command_InstallProvisioningProfile{msg}
		return true, err
	case 5: // request.remove_profisioning_profile
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RemoveProvisioningProfile)
		err := b.DecodeMessage(msg)
		m.Request = &Command_RemoveProfisioningProfile{msg}
		return true, err
	case 6: // request.installed_application_list
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstalledApplicationList)
		err := b.DecodeMessage(msg)
		m.Request = &Command_InstalledApplicationList{msg}
		return true, err
	case 7: // request.device_information
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceInformation)
		err := b.DecodeMessage(msg)
		m.Request = &Command_DeviceInformation{msg}
		return true, err
	case 8: // request.device_lock
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceLock)
		err := b.DecodeMessage(msg)
		m.Request = &Command_DeviceLock{msg}
		return true, err
	case 9: // request.clear_passcode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClearPasscode)
		err := b.DecodeMessage(msg)
		m.Request = &Command_ClearPasscode{msg}
		return true, err
	case 10: // request.erase_device
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EraseDevice)
		err := b.DecodeMessage(msg)
		m.Request = &Command_EraseDevice{msg}
		return true, err
	case 11: // request.request_mirroring
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestMirroring)
		err := b.DecodeMessage(msg)
		m.Request = &Command_RequestMirroring{msg}
		return true, err
	case 12: // request.restrictions
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Restrictions)
		err := b.DecodeMessage(msg)
		m.Request = &Command_Restrictions{msg}
		return true, err
	case 13: // request.unlock_user_account
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnlockUserAccount)
		err := b.DecodeMessage(msg)
		m.Request = &Command_UnlockUserAccount{msg}
		return true, err
	case 14: // request.delete_user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeleteUser)
		err := b.DecodeMessage(msg)
		m.Request = &Command_DeleteUser{msg}
		return true, err
	case 15: // request.enable_lost_mode
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EnableLostMode)
		err := b.DecodeMessage(msg)
		m.Request = &Command_EnableLostMode{msg}
		return true, err
	case 16: // request.install_application
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(InstallApplication)
		err := b.DecodeMessage(msg)
		m.Request = &Command_InstallApplication{msg}
		return true, err
	case 17: // request.account_configuration
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountConfiguration)
		err := b.DecodeMessage(msg)
		m.Request = &Command_AccountConfiguration{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Command_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Command)
	// request
	switch x := m.Request.(type) {
	case *Command_InstallProfile:
		s := proto.Size(x.InstallProfile)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_RemoveProfile:
		s := proto.Size(x.RemoveProfile)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_InstallProvisioningProfile:
		s := proto.Size(x.InstallProvisioningProfile)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_RemoveProfisioningProfile:
		s := proto.Size(x.RemoveProfisioningProfile)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_InstalledApplicationList:
		s := proto.Size(x.InstalledApplicationList)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_DeviceInformation:
		s := proto.Size(x.DeviceInformation)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_DeviceLock:
		s := proto.Size(x.DeviceLock)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_ClearPasscode:
		s := proto.Size(x.ClearPasscode)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_EraseDevice:
		s := proto.Size(x.EraseDevice)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_RequestMirroring:
		s := proto.Size(x.RequestMirroring)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_Restrictions:
		s := proto.Size(x.Restrictions)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_UnlockUserAccount:
		s := proto.Size(x.UnlockUserAccount)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_DeleteUser:
		s := proto.Size(x.DeleteUser)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_EnableLostMode:
		s := proto.Size(x.EnableLostMode)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_InstallApplication:
		s := proto.Size(x.InstallApplication)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Command_AccountConfiguration:
		s := proto.Size(x.AccountConfiguration)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type InstallProfile struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *InstallProfile) Reset()                    { *m = InstallProfile{} }
func (m *InstallProfile) String() string            { return proto.CompactTextString(m) }
func (*InstallProfile) ProtoMessage()               {}
func (*InstallProfile) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{2} }

func (m *InstallProfile) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type RemoveProfile struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *RemoveProfile) Reset()                    { *m = RemoveProfile{} }
func (m *RemoveProfile) String() string            { return proto.CompactTextString(m) }
func (*RemoveProfile) ProtoMessage()               {}
func (*RemoveProfile) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{3} }

func (m *RemoveProfile) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type InstallProvisioningProfile struct {
	ProvisioningProfile []byte `protobuf:"bytes,1,opt,name=provisioning_profile,json=provisioningProfile,proto3" json:"provisioning_profile,omitempty"`
}

func (m *InstallProvisioningProfile) Reset()                    { *m = InstallProvisioningProfile{} }
func (m *InstallProvisioningProfile) String() string            { return proto.CompactTextString(m) }
func (*InstallProvisioningProfile) ProtoMessage()               {}
func (*InstallProvisioningProfile) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{4} }

func (m *InstallProvisioningProfile) GetProvisioningProfile() []byte {
	if m != nil {
		return m.ProvisioningProfile
	}
	return nil
}

type RemoveProvisioningProfile struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *RemoveProvisioningProfile) Reset()                    { *m = RemoveProvisioningProfile{} }
func (m *RemoveProvisioningProfile) String() string            { return proto.CompactTextString(m) }
func (*RemoveProvisioningProfile) ProtoMessage()               {}
func (*RemoveProvisioningProfile) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{5} }

func (m *RemoveProvisioningProfile) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type InstalledApplicationList struct {
	Identifiers     []string `protobuf:"bytes,1,rep,name=identifiers" json:"identifiers,omitempty"`
	ManagedAppsOnly bool     `protobuf:"varint,2,opt,name=managed_apps_only,json=managedAppsOnly,proto3" json:"managed_apps_only,omitempty"`
}

func (m *InstalledApplicationList) Reset()                    { *m = InstalledApplicationList{} }
func (m *InstalledApplicationList) String() string            { return proto.CompactTextString(m) }
func (*InstalledApplicationList) ProtoMessage()               {}
func (*InstalledApplicationList) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{6} }

func (m *InstalledApplicationList) GetIdentifiers() []string {
	if m != nil {
		return m.Identifiers
	}
	return nil
}

func (m *InstalledApplicationList) GetManagedAppsOnly() bool {
	if m != nil {
		return m.ManagedAppsOnly
	}
	return false
}

type DeviceInformation struct {
	Queries []string `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (m *DeviceInformation) Reset()                    { *m = DeviceInformation{} }
func (m *DeviceInformation) String() string            { return proto.CompactTextString(m) }
func (*DeviceInformation) ProtoMessage()               {}
func (*DeviceInformation) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{7} }

func (m *DeviceInformation) GetQueries() []string {
	if m != nil {
		return m.Queries
	}
	return nil
}

type ClearPasscode struct {
	UnlockToken []byte `protobuf:"bytes,1,opt,name=unlock_token,json=unlockToken,proto3" json:"unlock_token,omitempty"`
}

func (m *ClearPasscode) Reset()                    { *m = ClearPasscode{} }
func (m *ClearPasscode) String() string            { return proto.CompactTextString(m) }
func (*ClearPasscode) ProtoMessage()               {}
func (*ClearPasscode) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{8} }

func (m *ClearPasscode) GetUnlockToken() []byte {
	if m != nil {
		return m.UnlockToken
	}
	return nil
}

type DeviceLock struct {
	Pin         string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	Message     string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *DeviceLock) Reset()                    { *m = DeviceLock{} }
func (m *DeviceLock) String() string            { return proto.CompactTextString(m) }
func (*DeviceLock) ProtoMessage()               {}
func (*DeviceLock) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{9} }

func (m *DeviceLock) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *DeviceLock) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *DeviceLock) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type EraseDevice struct {
	Pin              string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
	PreserveDataPlan bool   `protobuf:"varint,2,opt,name=preserve_data_plan,json=preserveDataPlan,proto3" json:"preserve_data_plan,omitempty"`
}

func (m *EraseDevice) Reset()                    { *m = EraseDevice{} }
func (m *EraseDevice) String() string            { return proto.CompactTextString(m) }
func (*EraseDevice) ProtoMessage()               {}
func (*EraseDevice) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{10} }

func (m *EraseDevice) GetPin() string {
	if m != nil {
		return m.Pin
	}
	return ""
}

func (m *EraseDevice) GetPreserveDataPlan() bool {
	if m != nil {
		return m.PreserveDataPlan
	}
	return false
}

type RequestMirroring struct {
	DestinationName     string `protobuf:"bytes,1,opt,name=destination_name,json=destinationName,proto3" json:"destination_name,omitempty"`
	DestinationDeviceId string `protobuf:"bytes,2,opt,name=destination_device_id,json=destinationDeviceId,proto3" json:"destination_device_id,omitempty"`
	ScanTime            string `protobuf:"bytes,3,opt,name=scan_time,json=scanTime,proto3" json:"scan_time,omitempty"`
	Password            string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *RequestMirroring) Reset()                    { *m = RequestMirroring{} }
func (m *RequestMirroring) String() string            { return proto.CompactTextString(m) }
func (*RequestMirroring) ProtoMessage()               {}
func (*RequestMirroring) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{11} }

func (m *RequestMirroring) GetDestinationName() string {
	if m != nil {
		return m.DestinationName
	}
	return ""
}

func (m *RequestMirroring) GetDestinationDeviceId() string {
	if m != nil {
		return m.DestinationDeviceId
	}
	return ""
}

func (m *RequestMirroring) GetScanTime() string {
	if m != nil {
		return m.ScanTime
	}
	return ""
}

func (m *RequestMirroring) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type Restrictions struct {
	ProfileRestrictions bool `protobuf:"varint,1,opt,name=profile_restrictions,json=profileRestrictions,proto3" json:"profile_restrictions,omitempty"`
}

func (m *Restrictions) Reset()                    { *m = Restrictions{} }
func (m *Restrictions) String() string            { return proto.CompactTextString(m) }
func (*Restrictions) ProtoMessage()               {}
func (*Restrictions) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{12} }

func (m *Restrictions) GetProfileRestrictions() bool {
	if m != nil {
		return m.ProfileRestrictions
	}
	return false
}

type UnlockUserAccount struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *UnlockUserAccount) Reset()                    { *m = UnlockUserAccount{} }
func (m *UnlockUserAccount) String() string            { return proto.CompactTextString(m) }
func (*UnlockUserAccount) ProtoMessage()               {}
func (*UnlockUserAccount) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{13} }

func (m *UnlockUserAccount) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type DeleteUser struct {
	Username      string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	ForceDeletion bool   `protobuf:"varint,2,opt,name=force_deletion,json=forceDeletion,proto3" json:"force_deletion,omitempty"`
}

func (m *DeleteUser) Reset()                    { *m = DeleteUser{} }
func (m *DeleteUser) String() string            { return proto.CompactTextString(m) }
func (*DeleteUser) ProtoMessage()               {}
func (*DeleteUser) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{14} }

func (m *DeleteUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DeleteUser) GetForceDeletion() bool {
	if m != nil {
		return m.ForceDeletion
	}
	return false
}

type EnableLostMode struct {
	Message     string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Footnote    string `protobuf:"bytes,3,opt,name=footnote,proto3" json:"footnote,omitempty"`
}

func (m *EnableLostMode) Reset()                    { *m = EnableLostMode{} }
func (m *EnableLostMode) String() string            { return proto.CompactTextString(m) }
func (*EnableLostMode) ProtoMessage()               {}
func (*EnableLostMode) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{15} }

func (m *EnableLostMode) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *EnableLostMode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *EnableLostMode) GetFootnote() string {
	if m != nil {
		return m.Footnote
	}
	return ""
}

type InstallApplication struct {
	ItunesStoreId         int64                            `protobuf:"varint,1,opt,name=itunes_store_id,json=itunesStoreId,proto3" json:"itunes_store_id,omitempty"`
	Identifier            string                           `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Options               *InstallApplicationOptions       `protobuf:"bytes,3,opt,name=options" json:"options,omitempty"`
	ManifestUrl           string                           `protobuf:"bytes,4,opt,name=manifest_url,json=manifestUrl,proto3" json:"manifest_url,omitempty"`
	ManagementFlags       int64                            `protobuf:"varint,5,opt,name=management_flags,json=managementFlags,proto3" json:"management_flags,omitempty"`
	Configuration         *InstallApplicationConfiguration `protobuf:"bytes,6,opt,name=configuration" json:"configuration,omitempty"`
	Attributes            *InstallApplicationAttributes    `protobuf:"bytes,7,opt,name=attributes" json:"attributes,omitempty"`
	ChangeManagementState string                           `protobuf:"bytes,8,opt,name=change_management_state,json=changeManagementState,proto3" json:"change_management_state,omitempty"`
}

func (m *InstallApplication) Reset()                    { *m = InstallApplication{} }
func (m *InstallApplication) String() string            { return proto.CompactTextString(m) }
func (*InstallApplication) ProtoMessage()               {}
func (*InstallApplication) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{16} }

func (m *InstallApplication) GetItunesStoreId() int64 {
	if m != nil {
		return m.ItunesStoreId
	}
	return 0
}

func (m *InstallApplication) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *InstallApplication) GetOptions() *InstallApplicationOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *InstallApplication) GetManifestUrl() string {
	if m != nil {
		return m.ManifestUrl
	}
	return ""
}

func (m *InstallApplication) GetManagementFlags() int64 {
	if m != nil {
		return m.ManagementFlags
	}
	return 0
}

func (m *InstallApplication) GetConfiguration() *InstallApplicationConfiguration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *InstallApplication) GetAttributes() *InstallApplicationAttributes {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *InstallApplication) GetChangeManagementState() string {
	if m != nil {
		return m.ChangeManagementState
	}
	return ""
}

type InstallApplicationOptions struct {
	PurchaseMethod int64 `protobuf:"varint,1,opt,name=purchase_method,json=purchaseMethod,proto3" json:"purchase_method,omitempty"`
}

func (m *InstallApplicationOptions) Reset()                    { *m = InstallApplicationOptions{} }
func (m *InstallApplicationOptions) String() string            { return proto.CompactTextString(m) }
func (*InstallApplicationOptions) ProtoMessage()               {}
func (*InstallApplicationOptions) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{17} }

func (m *InstallApplicationOptions) GetPurchaseMethod() int64 {
	if m != nil {
		return m.PurchaseMethod
	}
	return 0
}

type InstallApplicationConfiguration struct {
}

func (m *InstallApplicationConfiguration) Reset()         { *m = InstallApplicationConfiguration{} }
func (m *InstallApplicationConfiguration) String() string { return proto.CompactTextString(m) }
func (*InstallApplicationConfiguration) ProtoMessage()    {}
func (*InstallApplicationConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptorMdm, []int{18}
}

type InstallApplicationAttributes struct {
}

func (m *InstallApplicationAttributes) Reset()                    { *m = InstallApplicationAttributes{} }
func (m *InstallApplicationAttributes) String() string            { return proto.CompactTextString(m) }
func (*InstallApplicationAttributes) ProtoMessage()               {}
func (*InstallApplicationAttributes) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{19} }

type AccountConfiguration struct {
	SkipPrimarySetupAccountCreation      bool                      `protobuf:"varint,1,opt,name=skip_primary_setup_account_creation,json=skipPrimarySetupAccountCreation,proto3" json:"skip_primary_setup_account_creation,omitempty"`
	SkipPrimarySetupAccountAsRegularUser bool                      `protobuf:"varint,2,opt,name=skip_primary_setup_account_as_regular_user,json=skipPrimarySetupAccountAsRegularUser,proto3" json:"skip_primary_setup_account_as_regular_user,omitempty"`
	AutoSetupAdminAccounts               []*AutoSetupAdminAccounts `protobuf:"bytes,3,rep,name=auto_setup_admin_accounts,json=autoSetupAdminAccounts" json:"auto_setup_admin_accounts,omitempty"`
}

func (m *AccountConfiguration) Reset()                    { *m = AccountConfiguration{} }
func (m *AccountConfiguration) String() string            { return proto.CompactTextString(m) }
func (*AccountConfiguration) ProtoMessage()               {}
func (*AccountConfiguration) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{20} }

func (m *AccountConfiguration) GetSkipPrimarySetupAccountCreation() bool {
	if m != nil {
		return m.SkipPrimarySetupAccountCreation
	}
	return false
}

func (m *AccountConfiguration) GetSkipPrimarySetupAccountAsRegularUser() bool {
	if m != nil {
		return m.SkipPrimarySetupAccountAsRegularUser
	}
	return false
}

func (m *AccountConfiguration) GetAutoSetupAdminAccounts() []*AutoSetupAdminAccounts {
	if m != nil {
		return m.AutoSetupAdminAccounts
	}
	return nil
}

type AutoSetupAdminAccounts struct {
	ShortName    string `protobuf:"bytes,1,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	FullName     string `protobuf:"bytes,2,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	PasswordHash []byte `protobuf:"bytes,3,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	Hidden       bool   `protobuf:"varint,4,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (m *AutoSetupAdminAccounts) Reset()                    { *m = AutoSetupAdminAccounts{} }
func (m *AutoSetupAdminAccounts) String() string            { return proto.CompactTextString(m) }
func (*AutoSetupAdminAccounts) ProtoMessage()               {}
func (*AutoSetupAdminAccounts) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{21} }

func (m *AutoSetupAdminAccounts) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *AutoSetupAdminAccounts) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *AutoSetupAdminAccounts) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

func (m *AutoSetupAdminAccounts) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

type ResultPayload struct {
	Udid        string        `protobuf:"bytes,1,opt,name=udid,proto3" json:"udid,omitempty"`
	CommandUuid string        `protobuf:"bytes,2,opt,name=command_uuid,json=commandUuid,proto3" json:"command_uuid,omitempty"`
	ErrorChain  []*ErrorChain `protobuf:"bytes,3,rep,name=error_chain,json=errorChain" json:"error_chain,omitempty"`
}

func (m *ResultPayload) Reset()                    { *m = ResultPayload{} }
func (m *ResultPayload) String() string            { return proto.CompactTextString(m) }
func (*ResultPayload) ProtoMessage()               {}
func (*ResultPayload) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{22} }

func (m *ResultPayload) GetUdid() string {
	if m != nil {
		return m.Udid
	}
	return ""
}

func (m *ResultPayload) GetCommandUuid() string {
	if m != nil {
		return m.CommandUuid
	}
	return ""
}

func (m *ResultPayload) GetErrorChain() []*ErrorChain {
	if m != nil {
		return m.ErrorChain
	}
	return nil
}

type ErrorChain struct {
	LocalizedDescription string `protobuf:"bytes,1,opt,name=localized_description,json=localizedDescription,proto3" json:"localized_description,omitempty"`
	UsEnglishDescription string `protobuf:"bytes,2,opt,name=us_english_description,json=usEnglishDescription,proto3" json:"us_english_description,omitempty"`
	// The ErrorDomain and ErrorCode keys contain internal codes used by Apple
	// that may be useful for diagnostics. Your host should not rely on these
	// values, as they may change between software releases.
	ErrorDomain string `protobuf:"bytes,3,opt,name=error_domain,json=errorDomain,proto3" json:"error_domain,omitempty"`
	ErrorCode   int32  `protobuf:"varint,4,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
}

func (m *ErrorChain) Reset()                    { *m = ErrorChain{} }
func (m *ErrorChain) String() string            { return proto.CompactTextString(m) }
func (*ErrorChain) ProtoMessage()               {}
func (*ErrorChain) Descriptor() ([]byte, []int) { return fileDescriptorMdm, []int{23} }

func (m *ErrorChain) GetLocalizedDescription() string {
	if m != nil {
		return m.LocalizedDescription
	}
	return ""
}

func (m *ErrorChain) GetUsEnglishDescription() string {
	if m != nil {
		return m.UsEnglishDescription
	}
	return ""
}

func (m *ErrorChain) GetErrorDomain() string {
	if m != nil {
		return m.ErrorDomain
	}
	return ""
}

func (m *ErrorChain) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func init() {
	proto.RegisterType((*CommandPayload)(nil), "mdmproto.CommandPayload")
	proto.RegisterType((*Command)(nil), "mdmproto.Command")
	proto.RegisterType((*InstallProfile)(nil), "mdmproto.InstallProfile")
	proto.RegisterType((*RemoveProfile)(nil), "mdmproto.RemoveProfile")
	proto.RegisterType((*InstallProvisioningProfile)(nil), "mdmproto.InstallProvisioningProfile")
	proto.RegisterType((*RemoveProvisioningProfile)(nil), "mdmproto.RemoveProvisioningProfile")
	proto.RegisterType((*InstalledApplicationList)(nil), "mdmproto.InstalledApplicationList")
	proto.RegisterType((*DeviceInformation)(nil), "mdmproto.DeviceInformation")
	proto.RegisterType((*ClearPasscode)(nil), "mdmproto.ClearPasscode")
	proto.RegisterType((*DeviceLock)(nil), "mdmproto.DeviceLock")
	proto.RegisterType((*EraseDevice)(nil), "mdmproto.EraseDevice")
	proto.RegisterType((*RequestMirroring)(nil), "mdmproto.RequestMirroring")
	proto.RegisterType((*Restrictions)(nil), "mdmproto.Restrictions")
	proto.RegisterType((*UnlockUserAccount)(nil), "mdmproto.UnlockUserAccount")
	proto.RegisterType((*DeleteUser)(nil), "mdmproto.DeleteUser")
	proto.RegisterType((*EnableLostMode)(nil), "mdmproto.EnableLostMode")
	proto.RegisterType((*InstallApplication)(nil), "mdmproto.InstallApplication")
	proto.RegisterType((*InstallApplicationOptions)(nil), "mdmproto.InstallApplicationOptions")
	proto.RegisterType((*InstallApplicationConfiguration)(nil), "mdmproto.InstallApplicationConfiguration")
	proto.RegisterType((*InstallApplicationAttributes)(nil), "mdmproto.InstallApplicationAttributes")
	proto.RegisterType((*AccountConfiguration)(nil), "mdmproto.AccountConfiguration")
	proto.RegisterType((*AutoSetupAdminAccounts)(nil), "mdmproto.AutoSetupAdminAccounts")
	proto.RegisterType((*ResultPayload)(nil), "mdmproto.ResultPayload")
	proto.RegisterType((*ErrorChain)(nil), "mdmproto.ErrorChain")
	proto.RegisterEnum("mdmproto.ResultPayload_Status", ResultPayload_Status_name, ResultPayload_Status_value)
}
func (m *CommandPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CommandUuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.CommandUuid)))
		i += copy(dAtA[i:], m.CommandUuid)
	}
	if m.Command != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.Command.Size()))
		n1, err := m.Command.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *Command) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Command) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.RequestType)))
		i += copy(dAtA[i:], m.RequestType)
	}
	if m.Request != nil {
		nn2, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	return i, nil
}

func (m *Command_InstallProfile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InstallProfile != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.InstallProfile.Size()))
		n3, err := m.InstallProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Command_RemoveProfile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RemoveProfile != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.RemoveProfile.Size()))
		n4, err := m.RemoveProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Command_InstallProvisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InstallProvisioningProfile != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.InstallProvisioningProfile.Size()))
		n5, err := m.InstallProvisioningProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Command_RemoveProfisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RemoveProfisioningProfile != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.RemoveProfisioningProfile.Size()))
		n6, err := m.RemoveProfisioningProfile.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *Command_InstalledApplicationList) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InstalledApplicationList != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.InstalledApplicationList.Size()))
		n7, err := m.InstalledApplicationList.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *Command_DeviceInformation) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceInformation != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.DeviceInformation.Size()))
		n8, err := m.DeviceInformation.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *Command_DeviceLock) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeviceLock != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.DeviceLock.Size()))
		n9, err := m.DeviceLock.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *Command_ClearPasscode) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ClearPasscode != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.ClearPasscode.Size()))
		n10, err := m.ClearPasscode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *Command_EraseDevice) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EraseDevice != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.EraseDevice.Size()))
		n11, err := m.EraseDevice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *Command_RequestMirroring) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.RequestMirroring != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.RequestMirroring.Size()))
		n12, err := m.RequestMirroring.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Command_Restrictions) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Restrictions != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.Restrictions.Size()))
		n13, err := m.Restrictions.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Command_UnlockUserAccount) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnlockUserAccount != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.UnlockUserAccount.Size()))
		n14, err := m.UnlockUserAccount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Command_DeleteUser) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.DeleteUser != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.DeleteUser.Size()))
		n15, err := m.DeleteUser.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Command_EnableLostMode) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.EnableLostMode != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.EnableLostMode.Size()))
		n16, err := m.EnableLostMode.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Command_InstallApplication) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.InstallApplication != nil {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.InstallApplication.Size()))
		n17, err := m.InstallApplication.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Command_AccountConfiguration) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AccountConfiguration != nil {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.AccountConfiguration.Size()))
		n18, err := m.AccountConfiguration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *InstallProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *RemoveProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	return i, nil
}

func (m *InstallProvisioningProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallProvisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ProvisioningProfile) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ProvisioningProfile)))
		i += copy(dAtA[i:], m.ProvisioningProfile)
	}
	return i, nil
}

func (m *RemoveProvisioningProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveProvisioningProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	return i, nil
}

func (m *InstalledApplicationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstalledApplicationList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.ManagedAppsOnly {
		dAtA[i] = 0x10
		i++
		if m.ManagedAppsOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DeviceInformation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceInformation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, s := range m.Queries {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ClearPasscode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearPasscode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UnlockToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.UnlockToken)))
		i += copy(dAtA[i:], m.UnlockToken)
	}
	return i, nil
}

func (m *DeviceLock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceLock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Pin)))
		i += copy(dAtA[i:], m.Pin)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	return i, nil
}

func (m *EraseDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EraseDevice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Pin) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Pin)))
		i += copy(dAtA[i:], m.Pin)
	}
	if m.PreserveDataPlan {
		dAtA[i] = 0x10
		i++
		if m.PreserveDataPlan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *RequestMirroring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestMirroring) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DestinationName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.DestinationName)))
		i += copy(dAtA[i:], m.DestinationName)
	}
	if len(m.DestinationDeviceId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.DestinationDeviceId)))
		i += copy(dAtA[i:], m.DestinationDeviceId)
	}
	if len(m.ScanTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ScanTime)))
		i += copy(dAtA[i:], m.ScanTime)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *Restrictions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Restrictions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ProfileRestrictions {
		dAtA[i] = 0x8
		i++
		if m.ProfileRestrictions {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UnlockUserAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnlockUserAccount) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	return i, nil
}

func (m *DeleteUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.ForceDeletion {
		dAtA[i] = 0x10
		i++
		if m.ForceDeletion {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *EnableLostMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnableLostMode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.PhoneNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PhoneNumber)))
		i += copy(dAtA[i:], m.PhoneNumber)
	}
	if len(m.Footnote) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Footnote)))
		i += copy(dAtA[i:], m.Footnote)
	}
	return i, nil
}

func (m *InstallApplication) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplication) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ItunesStoreId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.ItunesStoreId))
	}
	if len(m.Identifier) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Identifier)))
		i += copy(dAtA[i:], m.Identifier)
	}
	if m.Options != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.Options.Size()))
		n19, err := m.Options.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.ManifestUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ManifestUrl)))
		i += copy(dAtA[i:], m.ManifestUrl)
	}
	if m.ManagementFlags != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.ManagementFlags))
	}
	if m.Configuration != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.Configuration.Size()))
		n20, err := m.Configuration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Attributes != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.Attributes.Size()))
		n21, err := m.Attributes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.ChangeManagementState) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ChangeManagementState)))
		i += copy(dAtA[i:], m.ChangeManagementState)
	}
	return i, nil
}

func (m *InstallApplicationOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplicationOptions) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PurchaseMethod != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.PurchaseMethod))
	}
	return i, nil
}

func (m *InstallApplicationConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplicationConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *InstallApplicationAttributes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstallApplicationAttributes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AccountConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountConfiguration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SkipPrimarySetupAccountCreation {
		dAtA[i] = 0x8
		i++
		if m.SkipPrimarySetupAccountCreation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SkipPrimarySetupAccountAsRegularUser {
		dAtA[i] = 0x10
		i++
		if m.SkipPrimarySetupAccountAsRegularUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.AutoSetupAdminAccounts) > 0 {
		for _, msg := range m.AutoSetupAdminAccounts {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMdm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AutoSetupAdminAccounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoSetupAdminAccounts) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ShortName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ShortName)))
		i += copy(dAtA[i:], m.ShortName)
	}
	if len(m.FullName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.FullName)))
		i += copy(dAtA[i:], m.FullName)
	}
	if len(m.PasswordHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.PasswordHash)))
		i += copy(dAtA[i:], m.PasswordHash)
	}
	if m.Hidden {
		dAtA[i] = 0x20
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *ResultPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Udid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.Udid)))
		i += copy(dAtA[i:], m.Udid)
	}
	if len(m.CommandUuid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.CommandUuid)))
		i += copy(dAtA[i:], m.CommandUuid)
	}
	if len(m.ErrorChain) > 0 {
		for _, msg := range m.ErrorChain {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMdm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ErrorChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorChain) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LocalizedDescription) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.LocalizedDescription)))
		i += copy(dAtA[i:], m.LocalizedDescription)
	}
	if len(m.UsEnglishDescription) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.UsEnglishDescription)))
		i += copy(dAtA[i:], m.UsEnglishDescription)
	}
	if len(m.ErrorDomain) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMdm(dAtA, i, uint64(len(m.ErrorDomain)))
		i += copy(dAtA[i:], m.ErrorDomain)
	}
	if m.ErrorCode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMdm(dAtA, i, uint64(m.ErrorCode))
	}
	return i, nil
}

func encodeVarintMdm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CommandPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.CommandUuid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *Command) Size() (n int) {
	var l int
	_ = l
	l = len(m.RequestType)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *Command_InstallProfile) Size() (n int) {
	var l int
	_ = l
	if m.InstallProfile != nil {
		l = m.InstallProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RemoveProfile) Size() (n int) {
	var l int
	_ = l
	if m.RemoveProfile != nil {
		l = m.RemoveProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstallProvisioningProfile) Size() (n int) {
	var l int
	_ = l
	if m.InstallProvisioningProfile != nil {
		l = m.InstallProvisioningProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RemoveProfisioningProfile) Size() (n int) {
	var l int
	_ = l
	if m.RemoveProfisioningProfile != nil {
		l = m.RemoveProfisioningProfile.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstalledApplicationList) Size() (n int) {
	var l int
	_ = l
	if m.InstalledApplicationList != nil {
		l = m.InstalledApplicationList.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_DeviceInformation) Size() (n int) {
	var l int
	_ = l
	if m.DeviceInformation != nil {
		l = m.DeviceInformation.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_DeviceLock) Size() (n int) {
	var l int
	_ = l
	if m.DeviceLock != nil {
		l = m.DeviceLock.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_ClearPasscode) Size() (n int) {
	var l int
	_ = l
	if m.ClearPasscode != nil {
		l = m.ClearPasscode.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_EraseDevice) Size() (n int) {
	var l int
	_ = l
	if m.EraseDevice != nil {
		l = m.EraseDevice.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_RequestMirroring) Size() (n int) {
	var l int
	_ = l
	if m.RequestMirroring != nil {
		l = m.RequestMirroring.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_Restrictions) Size() (n int) {
	var l int
	_ = l
	if m.Restrictions != nil {
		l = m.Restrictions.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_UnlockUserAccount) Size() (n int) {
	var l int
	_ = l
	if m.UnlockUserAccount != nil {
		l = m.UnlockUserAccount.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_DeleteUser) Size() (n int) {
	var l int
	_ = l
	if m.DeleteUser != nil {
		l = m.DeleteUser.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_EnableLostMode) Size() (n int) {
	var l int
	_ = l
	if m.EnableLostMode != nil {
		l = m.EnableLostMode.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_InstallApplication) Size() (n int) {
	var l int
	_ = l
	if m.InstallApplication != nil {
		l = m.InstallApplication.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *Command_AccountConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.AccountConfiguration != nil {
		l = m.AccountConfiguration.Size()
		n += 2 + l + sovMdm(uint64(l))
	}
	return n
}
func (m *InstallProfile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *RemoveProfile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *InstallProvisioningProfile) Size() (n int) {
	var l int
	_ = l
	l = len(m.ProvisioningProfile)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *RemoveProvisioningProfile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *InstalledApplicationList) Size() (n int) {
	var l int
	_ = l
	if len(m.Identifiers) > 0 {
		for _, s := range m.Identifiers {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	if m.ManagedAppsOnly {
		n += 2
	}
	return n
}

func (m *DeviceInformation) Size() (n int) {
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, s := range m.Queries {
			l = len(s)
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	return n
}

func (m *ClearPasscode) Size() (n int) {
	var l int
	_ = l
	l = len(m.UnlockToken)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *DeviceLock) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pin)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *EraseDevice) Size() (n int) {
	var l int
	_ = l
	l = len(m.Pin)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.PreserveDataPlan {
		n += 2
	}
	return n
}

func (m *RequestMirroring) Size() (n int) {
	var l int
	_ = l
	l = len(m.DestinationName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.DestinationDeviceId)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ScanTime)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *Restrictions) Size() (n int) {
	var l int
	_ = l
	if m.ProfileRestrictions {
		n += 2
	}
	return n
}

func (m *UnlockUserAccount) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *DeleteUser) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ForceDeletion {
		n += 2
	}
	return n
}

func (m *EnableLostMode) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.Footnote)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *InstallApplication) Size() (n int) {
	var l int
	_ = l
	if m.ItunesStoreId != 0 {
		n += 1 + sovMdm(uint64(m.ItunesStoreId))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ManifestUrl)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ManagementFlags != 0 {
		n += 1 + sovMdm(uint64(m.ManagementFlags))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Attributes != nil {
		l = m.Attributes.Size()
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ChangeManagementState)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	return n
}

func (m *InstallApplicationOptions) Size() (n int) {
	var l int
	_ = l
	if m.PurchaseMethod != 0 {
		n += 1 + sovMdm(uint64(m.PurchaseMethod))
	}
	return n
}

func (m *InstallApplicationConfiguration) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *InstallApplicationAttributes) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AccountConfiguration) Size() (n int) {
	var l int
	_ = l
	if m.SkipPrimarySetupAccountCreation {
		n += 2
	}
	if m.SkipPrimarySetupAccountAsRegularUser {
		n += 2
	}
	if len(m.AutoSetupAdminAccounts) > 0 {
		for _, e := range m.AutoSetupAdminAccounts {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	return n
}

func (m *AutoSetupAdminAccounts) Size() (n int) {
	var l int
	_ = l
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.Hidden {
		n += 2
	}
	return n
}

func (m *ResultPayload) Size() (n int) {
	var l int
	_ = l
	l = len(m.Udid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.CommandUuid)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if len(m.ErrorChain) > 0 {
		for _, e := range m.ErrorChain {
			l = e.Size()
			n += 1 + l + sovMdm(uint64(l))
		}
	}
	return n
}

func (m *ErrorChain) Size() (n int) {
	var l int
	_ = l
	l = len(m.LocalizedDescription)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.UsEnglishDescription)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	l = len(m.ErrorDomain)
	if l > 0 {
		n += 1 + l + sovMdm(uint64(l))
	}
	if m.ErrorCode != 0 {
		n += 1 + sovMdm(uint64(m.ErrorCode))
	}
	return n
}

func sovMdm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMdm(x uint64) (n int) {
	return sovMdm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommandPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Command) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Command: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Command: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallProfile{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RemoveProfile{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallProvisioningProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallProvisioningProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallProvisioningProfile{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveProfisioningProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveProvisioningProfile{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RemoveProfisioningProfile{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstalledApplicationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstalledApplicationList{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstalledApplicationList{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceInformation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeviceInformation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_DeviceInformation{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceLock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeviceLock{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_DeviceLock{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearPasscode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ClearPasscode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_ClearPasscode{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EraseDevice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EraseDevice{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_EraseDevice{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestMirroring", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RequestMirroring{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_RequestMirroring{v}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Restrictions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Restrictions{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_Restrictions{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockUserAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnlockUserAccount{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_UnlockUserAccount{v}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DeleteUser{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_DeleteUser{v}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableLostMode", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EnableLostMode{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_EnableLostMode{v}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstallApplication", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InstallApplication{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_InstallApplication{v}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccountConfiguration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &Command_AccountConfiguration{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallProvisioningProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallProvisioningProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallProvisioningProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvisioningProfile", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvisioningProfile = append(m.ProvisioningProfile[:0], dAtA[iNdEx:postIndex]...)
			if m.ProvisioningProfile == nil {
				m.ProvisioningProfile = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveProvisioningProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveProvisioningProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveProvisioningProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstalledApplicationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstalledApplicationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstalledApplicationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifiers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifiers = append(m.Identifiers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagedAppsOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ManagedAppsOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceInformation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceInformation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceInformation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearPasscode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearPasscode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearPasscode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnlockToken = append(m.UnlockToken[:0], dAtA[iNdEx:postIndex]...)
			if m.UnlockToken == nil {
				m.UnlockToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceLock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceLock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceLock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EraseDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EraseDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EraseDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreserveDataPlan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreserveDataPlan = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestMirroring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestMirroring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestMirroring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationDeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScanTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScanTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Restrictions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Restrictions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Restrictions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileRestrictions", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProfileRestrictions = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnlockUserAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnlockUserAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnlockUserAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDeletion", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDeletion = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EnableLostMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnableLostMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnableLostMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Footnote", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Footnote = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplication) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplication: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplication: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItunesStoreId", wireType)
			}
			m.ItunesStoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItunesStoreId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &InstallApplicationOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManifestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManifestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFlags", wireType)
			}
			m.ManagementFlags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ManagementFlags |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &InstallApplicationConfiguration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = &InstallApplicationAttributes{}
			}
			if err := m.Attributes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeManagementState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeManagementState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplicationOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplicationOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplicationOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaseMethod", wireType)
			}
			m.PurchaseMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaseMethod |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplicationConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplicationConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplicationConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstallApplicationAttributes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstallApplicationAttributes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstallApplicationAttributes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipPrimarySetupAccountCreation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipPrimarySetupAccountCreation = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipPrimarySetupAccountAsRegularUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipPrimarySetupAccountAsRegularUser = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoSetupAdminAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoSetupAdminAccounts = append(m.AutoSetupAdminAccounts, &AutoSetupAdminAccounts{})
			if err := m.AutoSetupAdminAccounts[len(m.AutoSetupAdminAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoSetupAdminAccounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoSetupAdminAccounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoSetupAdminAccounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = append(m.PasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PasswordHash == nil {
				m.PasswordHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Udid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorChain", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorChain = append(m.ErrorChain, &ErrorChain{})
			if err := m.ErrorChain[len(m.ErrorChain)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalizedDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalizedDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsEnglishDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsEnglishDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorDomain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMdm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorDomain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorCode", wireType)
			}
			m.ErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ErrorCode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMdm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMdm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMdm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMdm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMdm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMdm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMdm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMdm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMdm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMdm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("mdm.proto", fileDescriptorMdm) }

var fileDescriptorMdm = []byte{
	// 1589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x57, 0xdb, 0x6e, 0x1c, 0xb9,
	0x11, 0x9d, 0xd1, 0xc8, 0x92, 0xa6, 0xe6, 0xa2, 0x11, 0x75, 0x71, 0x4b, 0x72, 0x64, 0xb9, 0xed,
	0x38, 0xb6, 0x93, 0xd8, 0x88, 0x9c, 0x0b, 0x10, 0x24, 0x40, 0x64, 0xc9, 0xc6, 0x08, 0xd0, 0x0d,
	0x2d, 0x0b, 0x08, 0xe0, 0x87, 0x0e, 0xd5, 0xcd, 0x99, 0x21, 0xd4, 0x4d, 0xb6, 0x49, 0xb6, 0x0c,
	0xe5, 0x2f, 0xf2, 0x16, 0x20, 0x7f, 0x90, 0x3f, 0x48, 0xbe, 0x60, 0x1f, 0x17, 0xfb, 0x05, 0x0b,
	0xef, 0x47, 0xec, 0xeb, 0x82, 0x97, 0x9e, 0xe9, 0xb9, 0x48, 0xfb, 0xd6, 0x3c, 0x55, 0x3c, 0x24,
	0xab, 0x58, 0xa7, 0xd8, 0x50, 0x4f, 0xe3, 0xf4, 0x75, 0x26, 0xb8, 0xe2, 0x68, 0x29, 0x8d, 0x53,
	0xf3, 0xe5, 0xff, 0x03, 0xda, 0x07, 0x3c, 0x4d, 0x31, 0x8b, 0xcf, 0xf1, 0x6d, 0xc2, 0x71, 0x8c,
	0x9e, 0x40, 0x33, 0xb2, 0x48, 0x98, 0xe7, 0x34, 0xf6, 0xaa, 0xbb, 0xd5, 0x17, 0xf5, 0xa0, 0xe1,
	0xb0, 0xcb, 0x9c, 0xc6, 0xe8, 0xd7, 0xb0, 0xe8, 0x86, 0xde, 0xdc, 0x6e, 0xf5, 0x45, 0x63, 0x6f,
	0xe5, 0x75, 0x41, 0xf8, 0xda, 0xb1, 0x05, 0x85, 0x87, 0xff, 0x63, 0x1d, 0x16, 0x1d, 0xa8, 0xb9,
	0x05, 0xf9, 0x9c, 0x13, 0xa9, 0x42, 0x75, 0x9b, 0x91, 0x82, 0xdb, 0x61, 0x1f, 0x6f, 0x33, 0x82,
	0x0e, 0x60, 0x99, 0x32, 0xa9, 0x70, 0x92, 0x84, 0x99, 0xe0, 0x3d, 0x9a, 0x10, 0xb7, 0x86, 0x37,
	0x5a, 0xe3, 0xc8, 0x3a, 0x9c, 0x5b, 0x7b, 0xb7, 0x12, 0xb4, 0xe9, 0x18, 0x82, 0xfe, 0x06, 0x6d,
	0x41, 0x52, 0x7e, 0x43, 0x86, 0x1c, 0x35, 0xc3, 0xf1, 0x70, 0xc4, 0x11, 0x18, 0xfb, 0x88, 0xa2,
	0x25, 0xca, 0x00, 0x1a, 0xc0, 0xa3, 0xd2, 0x36, 0x6e, 0xa8, 0xa4, 0x9c, 0x51, 0xd6, 0x1f, 0xf2,
	0xcd, 0x1b, 0xbe, 0x67, 0xb3, 0xf6, 0x34, 0x74, 0x1e, 0x91, 0x6f, 0xd1, 0x3b, 0xad, 0x88, 0xc0,
	0x76, 0x79, 0xaf, 0x93, 0x0b, 0x3d, 0x30, 0x0b, 0x3d, 0x9d, 0xb1, 0xf1, 0x19, 0xeb, 0x6c, 0x96,
	0x0e, 0x31, 0xb1, 0xcc, 0x15, 0x14, 0x9b, 0x20, 0x71, 0x88, 0xb3, 0x2c, 0xa1, 0x11, 0x56, 0x94,
	0xb3, 0x30, 0xa1, 0x52, 0x79, 0x0b, 0x66, 0x15, 0x7f, 0xea, 0x38, 0x24, 0xde, 0x1f, 0xb9, 0x1e,
	0x53, 0xa9, 0xba, 0x95, 0xc0, 0xa3, 0x77, 0xd8, 0xd0, 0x31, 0xa0, 0x98, 0xdc, 0xd0, 0x88, 0x84,
	0x94, 0xf5, 0xb8, 0x48, 0x8d, 0xc5, 0x5b, 0x34, 0xdc, 0xdb, 0x23, 0xee, 0x43, 0xe3, 0x73, 0x34,
	0x72, 0xe9, 0x56, 0x82, 0x95, 0x78, 0x12, 0x44, 0x7f, 0x82, 0x86, 0x63, 0x4b, 0x78, 0x74, 0xed,
	0x2d, 0x19, 0x9a, 0xb5, 0x49, 0x9a, 0x63, 0x1e, 0x5d, 0x77, 0x2b, 0x01, 0xc4, 0xc3, 0x91, 0xce,
	0x7e, 0x94, 0x10, 0x2c, 0xc2, 0x0c, 0x4b, 0x19, 0xf1, 0x98, 0x78, 0xf5, 0xc9, 0xec, 0x1f, 0x68,
	0xfb, 0xb9, 0x33, 0xeb, 0xec, 0x47, 0x65, 0x00, 0xfd, 0x19, 0x9a, 0x44, 0x60, 0x49, 0x42, 0xcb,
	0xea, 0x81, 0x99, 0xbf, 0x3e, 0x9a, 0xff, 0x5e, 0x5b, 0xed, 0x06, 0xba, 0x95, 0xa0, 0x41, 0x46,
	0x43, 0x74, 0x04, 0x2b, 0xc5, 0x1d, 0x4f, 0xa9, 0x10, 0x5c, 0x50, 0xd6, 0xf7, 0x1a, 0x86, 0x60,
	0xab, 0x9c, 0x45, 0xe3, 0x72, 0x52, 0x78, 0x74, 0x2b, 0x41, 0x47, 0x4c, 0x60, 0xe8, 0x2f, 0xba,
	0x5c, 0xa4, 0x12, 0x34, 0xd2, 0x01, 0x91, 0x5e, 0xd3, 0xb0, 0x6c, 0x94, 0x59, 0x46, 0xd6, 0x6e,
	0x25, 0x18, 0xf3, 0x46, 0x27, 0xb0, 0x9a, 0x33, 0x1d, 0xba, 0x30, 0x97, 0x44, 0x84, 0x38, 0x8a,
	0x78, 0xce, 0x94, 0xd7, 0x9a, 0x4c, 0xc7, 0xa5, 0x71, 0xba, 0x94, 0x44, 0xec, 0x5b, 0x17, 0x9d,
	0x8e, 0x7c, 0x12, 0xb4, 0xe9, 0x48, 0x88, 0x22, 0x86, 0xce, 0x6b, 0x4f, 0xa7, 0x43, 0x1b, 0xf5,
	0x0c, 0x9b, 0x8e, 0x62, 0x84, 0x0e, 0xa1, 0x43, 0x18, 0xbe, 0x4a, 0x74, 0x1e, 0x75, 0x50, 0x74,
	0x42, 0x96, 0x27, 0x4b, 0xfa, 0xbd, 0xf1, 0x38, 0xe6, 0x52, 0x9d, 0xd8, 0x8c, 0xb4, 0xc9, 0x18,
	0x82, 0xce, 0x60, 0xb5, 0x28, 0xc8, 0xd2, 0xed, 0xf5, 0x3a, 0x86, 0xe8, 0xd1, 0xd4, 0xc5, 0x2d,
	0x5d, 0xcd, 0x6e, 0x25, 0x40, 0x74, 0x0a, 0x45, 0x97, 0xb0, 0xee, 0x42, 0x12, 0x46, 0x9c, 0xf5,
	0x68, 0x3f, 0x17, 0x96, 0x72, 0xc5, 0x50, 0xee, 0x8c, 0x28, 0x5d, 0x04, 0x0e, 0xca, 0x5e, 0xdd,
	0x4a, 0xb0, 0x86, 0x67, 0xe0, 0xef, 0xea, 0xb0, 0xe8, 0xf2, 0xe8, 0xbf, 0x82, 0xf6, 0xb8, 0x52,
	0x21, 0x0f, 0x16, 0x33, 0x2b, 0xb3, 0x46, 0xfa, 0x9a, 0x41, 0x31, 0xf4, 0xdf, 0x40, 0x6b, 0x4c,
	0x91, 0xd0, 0x0e, 0x00, 0x8d, 0x09, 0x53, 0xb4, 0x47, 0x89, 0x70, 0x42, 0x59, 0x42, 0xfc, 0x33,
	0xd8, 0xba, 0x5b, 0x72, 0xd0, 0xef, 0x60, 0x6d, 0xa6, 0x6c, 0xd9, 0x55, 0x57, 0xb3, 0xe9, 0x29,
	0xfe, 0x1b, 0xd8, 0xbc, 0x53, 0x5a, 0x10, 0x82, 0xf9, 0x52, 0x33, 0x30, 0xdf, 0xfe, 0x00, 0xbc,
	0xbb, 0x54, 0x02, 0xed, 0x42, 0x63, 0xb4, 0x57, 0xe9, 0x55, 0x77, 0x6b, 0x5a, 0xe7, 0x4b, 0x10,
	0x7a, 0x05, 0x2b, 0x29, 0x66, 0xb8, 0x6f, 0xd5, 0x48, 0x86, 0x9c, 0x25, 0xb7, 0x46, 0xe9, 0x97,
	0x82, 0x65, 0x67, 0xd8, 0xcf, 0x32, 0x79, 0xc6, 0x92, 0x5b, 0xff, 0xb7, 0xb0, 0x32, 0xa5, 0x19,
	0x3a, 0x96, 0x9f, 0x73, 0x22, 0x28, 0x29, 0xe8, 0x8b, 0xa1, 0xbf, 0x07, 0xad, 0xb1, 0xfa, 0xd6,
	0x6d, 0xc7, 0x55, 0x82, 0xe2, 0xd7, 0x84, 0xb9, 0x28, 0x34, 0x2c, 0xf6, 0x51, 0x43, 0xfe, 0x27,
	0x80, 0x91, 0x9e, 0xa0, 0x0e, 0xd4, 0x32, 0xca, 0xdc, 0x69, 0xf5, 0xa7, 0x5e, 0x2d, 0x25, 0x52,
	0xe2, 0xbe, 0x6d, 0x47, 0xf5, 0xa0, 0x18, 0x6a, 0xf2, 0x6c, 0xc0, 0x19, 0x09, 0x59, 0x9e, 0x5e,
	0x11, 0x61, 0x3a, 0x4d, 0x3d, 0x68, 0x18, 0xec, 0xd4, 0x40, 0xfe, 0x09, 0x34, 0x4a, 0x82, 0x31,
	0x83, 0xfd, 0x37, 0x80, 0x32, 0x41, 0x24, 0x11, 0x37, 0x24, 0x8c, 0xb1, 0xc2, 0x61, 0x96, 0x60,
	0xe6, 0xa2, 0xd1, 0x29, 0x2c, 0x87, 0x58, 0xe1, 0xf3, 0x04, 0x33, 0xff, 0xbf, 0x55, 0xe8, 0x4c,
	0xea, 0x07, 0x7a, 0x09, 0x9d, 0x98, 0x48, 0x45, 0x99, 0x55, 0x75, 0x86, 0xd3, 0xa2, 0xbd, 0x2e,
	0x97, 0xf0, 0x53, 0x9c, 0x12, 0xb4, 0x07, 0xeb, 0x65, 0xd7, 0x42, 0xb2, 0x63, 0x77, 0xb2, 0xd5,
	0x92, 0xd1, 0x85, 0x3d, 0x46, 0xdb, 0x50, 0x97, 0x11, 0x66, 0xa1, 0xa2, 0x29, 0x71, 0x47, 0x5c,
	0xd2, 0xc0, 0x47, 0x9a, 0x12, 0xb4, 0x05, 0x4b, 0x5a, 0x6a, 0xbf, 0x70, 0x11, 0x9b, 0xc6, 0x58,
	0x0f, 0x86, 0x63, 0x7f, 0x1f, 0x9a, 0x65, 0x95, 0x72, 0x37, 0x53, 0x5f, 0xaa, 0x70, 0x4c, 0xdb,
	0xaa, 0xe6, 0xb0, 0xab, 0xce, 0x56, 0x9e, 0xe2, 0xbf, 0x81, 0x95, 0x29, 0x8d, 0xd2, 0x6b, 0x6a,
	0x1d, 0x2a, 0x9d, 0x73, 0x38, 0xf6, 0xcf, 0x74, 0x32, 0x87, 0xfa, 0x73, 0x8f, 0x27, 0xfa, 0x25,
	0xb4, 0x7b, 0x5c, 0x44, 0x5a, 0xe8, 0x13, 0x62, 0xaa, 0xdf, 0x06, 0xbd, 0x65, 0xd0, 0x43, 0x07,
	0xfa, 0x14, 0xda, 0xe3, 0x02, 0x55, 0xbe, 0x0f, 0xd5, 0xfb, 0xef, 0xc3, 0xdc, 0xd4, 0x7d, 0xd0,
	0x3b, 0xea, 0x71, 0xae, 0x18, 0x57, 0xc3, 0x58, 0x16, 0x63, 0xff, 0xff, 0x35, 0x40, 0xd3, 0x1a,
	0x86, 0x9e, 0xc3, 0x32, 0x55, 0x39, 0x23, 0x32, 0x94, 0x8a, 0x0b, 0x93, 0x2d, 0xbd, 0x6e, 0x2d,
	0x68, 0x59, 0xf8, 0x42, 0xa3, 0x47, 0xf1, 0x84, 0x6c, 0xcc, 0x4d, 0xca, 0x06, 0xfa, 0x2b, 0x2c,
	0xf2, 0xcc, 0x46, 0xbc, 0x36, 0xf9, 0xb2, 0x98, 0x5e, 0xf6, 0xcc, 0xba, 0x06, 0xc5, 0x1c, 0x7d,
	0xb8, 0x14, 0x33, 0xda, 0xd3, 0xdd, 0x2d, 0x17, 0x89, 0xcb, 0x76, 0xa3, 0xc0, 0x2e, 0x45, 0xa2,
	0x2f, 0xa2, 0xad, 0xdf, 0x94, 0x30, 0x15, 0xf6, 0x12, 0xdc, 0x97, 0xe6, 0x11, 0x53, 0x2b, 0xea,
	0x5a, 0xe3, 0x1f, 0x34, 0x8c, 0xce, 0xa0, 0x35, 0x2e, 0xbd, 0xf6, 0x19, 0xf2, 0xf2, 0xbe, 0x2d,
	0x8d, 0xa9, 0x6d, 0x30, 0x3e, 0x1f, 0x7d, 0x00, 0xc0, 0x4a, 0x09, 0x7a, 0x95, 0x2b, 0x22, 0xdd,
	0xc3, 0xe3, 0xf9, 0x7d, 0x6c, 0xfb, 0x43, 0xef, 0xa0, 0x34, 0x13, 0xfd, 0x11, 0x1e, 0x46, 0x03,
	0xcc, 0xfa, 0x24, 0x2c, 0x1d, 0x45, 0x2a, 0xac, 0x88, 0x79, 0x86, 0xd4, 0x83, 0x75, 0x6b, 0x3e,
	0x19, 0x5a, 0x2f, 0xb4, 0xd1, 0x3f, 0x84, 0xcd, 0x3b, 0x83, 0x88, 0x7e, 0x05, 0xcb, 0x59, 0x2e,
	0xa2, 0x81, 0x7e, 0x57, 0xa4, 0x44, 0x0d, 0x78, 0x91, 0xc2, 0x76, 0x01, 0x9f, 0x18, 0xd4, 0x7f,
	0x02, 0x8f, 0x7f, 0xe6, 0xdc, 0xfe, 0x0e, 0x3c, 0xba, 0xef, 0x30, 0xfe, 0x7f, 0xe6, 0x60, 0x6d,
	0x56, 0xdb, 0x42, 0xc7, 0xf0, 0x54, 0x5e, 0xd3, 0x2c, 0xcc, 0x04, 0x4d, 0xb1, 0xb8, 0x0d, 0x25,
	0x51, 0x79, 0x16, 0x0e, 0x1b, 0xa1, 0x20, 0x36, 0x11, 0xb6, 0x1a, 0x1f, 0x6b, 0xd7, 0x73, 0xeb,
	0x79, 0xa1, 0x1d, 0x0b, 0x4a, 0xe7, 0x86, 0xfe, 0x0e, 0xaf, 0xee, 0x61, 0xc3, 0x32, 0x14, 0xa4,
	0x9f, 0x27, 0x58, 0xd8, 0x27, 0x83, 0x2d, 0xad, 0x67, 0x77, 0x90, 0xee, 0xcb, 0xc0, 0x3a, 0x9b,
	0xa2, 0xfd, 0x04, 0x9b, 0x38, 0x57, 0xbc, 0x60, 0x8c, 0x53, 0xca, 0x0a, 0x5e, 0x7d, 0x73, 0x6b,
	0x2f, 0x1a, 0x7b, 0xbb, 0xa5, 0x0e, 0x9d, 0x2b, 0x6e, 0xb9, 0xb4, 0xa3, 0x23, 0x94, 0xc1, 0x06,
	0x9e, 0x89, 0xfb, 0xff, 0xaa, 0xc2, 0xc6, 0xec, 0x29, 0xe8, 0x17, 0x00, 0x72, 0xc0, 0x85, 0x2a,
	0x0b, 0x68, 0xdd, 0x20, 0x46, 0x3a, 0xb7, 0xa1, 0xde, 0xcb, 0x93, 0xc4, 0x5a, 0xe7, 0x5c, 0xe9,
	0xe6, 0x49, 0x62, 0x8c, 0x4f, 0xa1, 0x55, 0xc8, 0x5e, 0x38, 0xc0, 0x72, 0x60, 0x2a, 0xac, 0x19,
	0x34, 0x0b, 0xb0, 0x8b, 0xe5, 0x00, 0x6d, 0xc0, 0xc2, 0x80, 0xc6, 0x31, 0x61, 0xa6, 0x76, 0x96,
	0x02, 0x37, 0xf2, 0xbf, 0xab, 0xea, 0x17, 0x80, 0xcc, 0x13, 0x55, 0xfc, 0x88, 0xe9, 0x9e, 0x1b,
	0x97, 0x7a, 0x6e, 0x4c, 0xa7, 0x7f, 0xce, 0xe6, 0xa6, 0x7f, 0xce, 0xfe, 0x00, 0x0d, 0xa2, 0x9b,
	0x42, 0x18, 0x0d, 0x30, 0x65, 0x2e, 0x56, 0x6b, 0xe5, 0xa7, 0xab, 0xe0, 0xe2, 0x40, 0xdb, 0x02,
	0x20, 0xc3, 0x6f, 0xff, 0x02, 0x16, 0xf4, 0x1d, 0xce, 0x25, 0xea, 0x40, 0x73, 0x3f, 0xba, 0x66,
	0xfc, 0x4b, 0x42, 0xe2, 0x3e, 0x89, 0x3b, 0x15, 0x54, 0x87, 0x07, 0x66, 0x56, 0xa7, 0x8a, 0x36,
	0x00, 0xb9, 0x9f, 0xb9, 0x0f, 0xa6, 0x13, 0x5b, 0x7c, 0x0e, 0x2d, 0xc1, 0xfc, 0x51, 0x9c, 0x90,
	0x4e, 0x0d, 0x01, 0x2c, 0x9c, 0x72, 0x75, 0xca, 0xbf, 0x74, 0xe6, 0xfd, 0xff, 0x55, 0x01, 0x46,
	0xeb, 0xa1, 0xb7, 0xb0, 0x9e, 0xf0, 0x08, 0x27, 0xf4, 0x9f, 0x24, 0x0e, 0x63, 0x22, 0x23, 0x41,
	0xb3, 0xe1, 0x75, 0xab, 0x07, 0x6b, 0x43, 0xe3, 0xe1, 0xc8, 0x86, 0x7e, 0x0f, 0x1b, 0xb9, 0x0c,
	0x09, 0xeb, 0x27, 0x54, 0x0e, 0xc6, 0x66, 0xd9, 0xc3, 0xaf, 0xe5, 0xf2, 0xbd, 0x35, 0x96, 0x67,
	0x3d, 0xd1, 0x2f, 0x78, 0x1d, 0x85, 0x98, 0xa7, 0x36, 0x0c, 0x26, 0x50, 0x06, 0x3b, 0x34, 0x90,
	0x4e, 0xb5, 0x0b, 0x94, 0x7e, 0x91, 0xea, 0x6c, 0x3c, 0x08, 0xea, 0x36, 0x22, 0x3c, 0x26, 0xef,
	0x3a, 0xdf, 0x7c, 0xdd, 0xa9, 0x7e, 0xfb, 0x75, 0xa7, 0xfa, 0xfd, 0xd7, 0x9d, 0xea, 0xbf, 0x7f,
	0xd8, 0xa9, 0x5c, 0x2d, 0x98, 0x00, 0xbe, 0xfd, 0x29, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x97, 0x0c,
	0x98, 0x49, 0x0f, 0x00, 0x00,
}
